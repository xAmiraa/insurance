// <auto-generated />
using System;
using InsuranceClaims.Data.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace InsuranceClaims.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210207210023_AddTables")]
    partial class AddTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("CompanyPolicyType", b =>
                {
                    b.Property<int>("CompaniesId")
                        .HasColumnType("int");

                    b.Property<int>("PolicyTypesId")
                        .HasColumnType("int");

                    b.HasKey("CompaniesId", "PolicyTypesId");

                    b.HasIndex("PolicyTypesId");

                    b.ToTable("CompanyPolicyTypes", "Companies");
                });

            modelBuilder.Entity("CustomerBeneficiaryPolicy", b =>
                {
                    b.Property<int>("CustomerBeneficiariesId")
                        .HasColumnType("int");

                    b.Property<int>("PoliciesId")
                        .HasColumnType("int");

                    b.HasKey("CustomerBeneficiariesId", "PoliciesId");

                    b.HasIndex("PoliciesId");

                    b.ToTable("CustomerBeneficiaryPolicies", "Policies");
                });

            modelBuilder.Entity("CustomerDependentPolicy", b =>
                {
                    b.Property<int>("CustomerDependentsId")
                        .HasColumnType("int");

                    b.Property<int>("PoliciesId")
                        .HasColumnType("int");

                    b.HasKey("CustomerDependentsId", "PoliciesId");

                    b.HasIndex("PoliciesId");

                    b.ToTable("CustomerDependentPolicies", "Policies");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.ClaimSchema.Claim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("ChequeAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ChequeNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClaimStatusId")
                        .HasColumnType("int");

                    b.Property<int>("CollectionMethodId")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateChequeIssued")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateReceived")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateReturnedFromInsurance")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateSentToInsurance")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Patient")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PolicyId")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SystemNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClaimStatusId");

                    b.HasIndex("CollectionMethodId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PolicyId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Claims", "Claims");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.ClaimSchema.ClaimAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AttachmentPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClaimId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClaimId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("ClaimAttachments", "Claims");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.CompanySchema.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AccountLoginAttempts")
                        .HasColumnType("int");

                    b.Property<double>("AttachmentsMaxSize")
                        .HasColumnType("float");

                    b.Property<bool>("AutoPaymentOnAddingNewPrepayment")
                        .HasColumnType("bit");

                    b.Property<long>("BeginingReceiptNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("BusinessRegisterationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LogoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumOfDaysToChangePassword")
                        .HasColumnType("int");

                    b.Property<int>("PasswordExpiryTime")
                        .HasColumnType("int");

                    b.Property<bool>("ShowCashAndChangePage")
                        .HasColumnType("bit");

                    b.Property<string>("TaxRegisterationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TimeToSessionTimeOut")
                        .HasColumnType("int");

                    b.Property<int>("TimesCountBeforePasswordReuse")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("UserPhotosize")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Companies", "Companies");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.CompanySchema.CompanyAttachmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("CompanyAttachmentTypes", "Companies");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.CompanySchema.CompanyCollectionMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("CompanyCollectionMethods", "Companies");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.CompanySchema.CompanyContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("BusinessAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BusinessCountryId")
                        .HasColumnType("int");

                    b.Property<string>("BusinessPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CellPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BusinessCountryId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("CompanyContacts", "Companies");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.CompanySchema.CompanyDenomination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DenominationValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("CompanyDenominations", "Companies");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.CompanySchema.CompanyEmployer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("CompanyEmployers", "Companies");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.CompanySchema.CompanyMinorAge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AgeValue")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("CompanyMinorAges", "Companies");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.CompanySchema.CompanyPaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("CompanyPaymentMethods", "Companies");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.CustomerSchema.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AccountManagerId")
                        .HasColumnType("int");

                    b.Property<string>("BusinessName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateEmployed")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EmployerId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBusiness")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Minor")
                        .HasColumnType("bit");

                    b.Property<string>("NationalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NisNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentGuardian")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegisterationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TamisNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountManagerId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("EmployerId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Customers", "Customers");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.CustomerSchema.CustomerBeneficiary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Allocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CustomerId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Beneficiaries", "Customers");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.CustomerSchema.CustomerContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CellPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("HomePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Parish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondaryEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("WorkPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CustomerId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("CustomerContacts", "Customers");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.CustomerSchema.CustomerDependent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CustomerId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Dependents", "Customers");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.LookupSchema.ClaimStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ClaimStatuses", "Lookups");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.LookupSchema.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CallingCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrencyCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NativeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Countries", "Lookups");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.LookupSchema.CoverageType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CoverageTypes", "Lookups");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.LookupSchema.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Currencies", "Lookups");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.LookupSchema.IdentificationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("IdentificationTypes", "Lookups");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.LookupSchema.PolicyInsurer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("PolicyInsurers", "Lookups");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.LookupSchema.PolicyType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PolicyInsurerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PolicyInsurerId");

                    b.ToTable("PolicyTypes", "Lookups");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.PaymentSchema.Bill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("BillDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("PaymentDue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PolicyId")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PolicyId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Bills", "Payments");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.PaymentSchema.CashDenomination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CompanyDenominationId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Denomination")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyDenominationId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("PaymentId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("CashDenominations", "Payments");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.PaymentSchema.CashDenominationReturn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CompanyDenominationId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Denomination")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyDenominationId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("PaymentId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("CashDenominationReturns", "Payments");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.PaymentSchema.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PaidBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReceiptNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CustomerId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Payments", "Payments");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.PaymentSchema.PaymentAllocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("BillId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PaidTo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PaymentDue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<int?>("PolicyId")
                        .HasColumnType("int");

                    b.Property<int?>("PrepaymentId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BillId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("PaymentId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("PolicyId");

                    b.HasIndex("PrepaymentId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("PaymentAllocations", "Payments");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.PaymentSchema.Prepayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PaidBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PolicyId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PolicyId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Prepayments", "Payments");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.PolicySchema.Policy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("AgeOfMaturity")
                        .HasColumnType("int");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("ChasisNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("CommercialOwned")
                        .HasColumnType("bit");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Construction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contents")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CoverageTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<double?>("CriticalIllness")
                        .HasColumnType("float");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<double?>("DependentCover")
                        .HasColumnType("float");

                    b.Property<decimal?>("DepositAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EngineCC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EngineNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Foundation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("InstallmentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRegistered")
                        .HasColumnType("bit");

                    b.Property<string>("Itinerary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LengthOfTerm")
                        .HasColumnType("int");

                    b.Property<double?>("LevelOfBenefit")
                        .HasColumnType("float");

                    b.Property<string>("LicenseNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("MachineryOwned")
                        .HasColumnType("bit");

                    b.Property<string>("MachineryType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MachineryValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Make")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MaximumPerOccurence")
                        .HasColumnType("int");

                    b.Property<string>("ModeOfTravel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Mortagagee")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PolicyTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("SeatCapacity")
                        .HasColumnType("int");

                    b.Property<double?>("SumInsured")
                        .HasColumnType("float");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhoCommercial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhoMachinery")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhoMortagagee")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CoverageTypeId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PolicyTypeId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Policies", "Policies");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.PolicySchema.PolicyContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PolicyId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("PolicyId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("PolicyContents", "Policies");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.PolicySchema.PolicyInsuredDriver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdentificationTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PolicyId")
                        .HasColumnType("int");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("IdentificationTypeId");

                    b.HasIndex("PolicyId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("PolicyInsuredDrivers", "Policies");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", "Security");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", "Security");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CallingCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ChangePassword")
                        .HasColumnType("bit");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EmailVerifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("NextPasswordExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", "Security");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", "Security");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", "Security");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationUserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("RoleId1")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("RoleId1");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles", "Security");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationUserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", "Security");
                });

            modelBuilder.Entity("CompanyPolicyType", b =>
                {
                    b.HasOne("InsuranceClaims.Data.DbModels.CompanySchema.Company", null)
                        .WithMany()
                        .HasForeignKey("CompaniesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InsuranceClaims.Data.DbModels.LookupSchema.PolicyType", null)
                        .WithMany()
                        .HasForeignKey("PolicyTypesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("CustomerBeneficiaryPolicy", b =>
                {
                    b.HasOne("InsuranceClaims.Data.DbModels.CustomerSchema.CustomerBeneficiary", null)
                        .WithMany()
                        .HasForeignKey("CustomerBeneficiariesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InsuranceClaims.Data.DbModels.PolicySchema.Policy", null)
                        .WithMany()
                        .HasForeignKey("PoliciesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("CustomerDependentPolicy", b =>
                {
                    b.HasOne("InsuranceClaims.Data.DbModels.CustomerSchema.CustomerDependent", null)
                        .WithMany()
                        .HasForeignKey("CustomerDependentsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InsuranceClaims.Data.DbModels.PolicySchema.Policy", null)
                        .WithMany()
                        .HasForeignKey("PoliciesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.ClaimSchema.Claim", b =>
                {
                    b.HasOne("InsuranceClaims.Data.DbModels.LookupSchema.ClaimStatus", "ClaimStatus")
                        .WithMany("Claims")
                        .HasForeignKey("ClaimStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InsuranceClaims.Data.DbModels.CompanySchema.CompanyCollectionMethod", "CollectionMethod")
                        .WithMany("Claims")
                        .HasForeignKey("CollectionMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InsuranceClaims.Data.DbModels.CustomerSchema.Customer", "Customer")
                        .WithMany("Claims")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InsuranceClaims.Data.DbModels.PolicySchema.Policy", "Policy")
                        .WithMany("Claims")
                        .HasForeignKey("PolicyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationUser", "Updator")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ClaimStatus");

                    b.Navigation("CollectionMethod");

                    b.Navigation("Creator");

                    b.Navigation("Customer");

                    b.Navigation("Policy");

                    b.Navigation("Updator");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.ClaimSchema.ClaimAttachment", b =>
                {
                    b.HasOne("InsuranceClaims.Data.DbModels.ClaimSchema.Claim", "Claim")
                        .WithMany("ClaimAttachments")
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationUser", "Updator")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Claim");

                    b.Navigation("Creator");

                    b.Navigation("Updator");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.CompanySchema.Company", b =>
                {
                    b.HasOne("InsuranceClaims.Data.DbModels.LookupSchema.Country", "Country")
                        .WithMany("Companies")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InsuranceClaims.Data.DbModels.LookupSchema.Currency", "Currency")
                        .WithMany("Companies")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationUser", "Updator")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Country");

                    b.Navigation("Creator");

                    b.Navigation("Currency");

                    b.Navigation("Updator");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.CompanySchema.CompanyAttachmentType", b =>
                {
                    b.HasOne("InsuranceClaims.Data.DbModels.CompanySchema.Company", "Company")
                        .WithMany("CompanyAttachmentTypes")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationUser", "Updator")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Company");

                    b.Navigation("Creator");

                    b.Navigation("Updator");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.CompanySchema.CompanyCollectionMethod", b =>
                {
                    b.HasOne("InsuranceClaims.Data.DbModels.CompanySchema.Company", "Company")
                        .WithMany("CompanyCollectionMethods")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationUser", "Updator")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Company");

                    b.Navigation("Creator");

                    b.Navigation("Updator");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.CompanySchema.CompanyContact", b =>
                {
                    b.HasOne("InsuranceClaims.Data.DbModels.LookupSchema.Country", "BusinessCountry")
                        .WithMany()
                        .HasForeignKey("BusinessCountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InsuranceClaims.Data.DbModels.CompanySchema.Company", "Company")
                        .WithMany("CompanyContacts")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationUser", "Updator")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("BusinessCountry");

                    b.Navigation("Company");

                    b.Navigation("Creator");

                    b.Navigation("Updator");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.CompanySchema.CompanyDenomination", b =>
                {
                    b.HasOne("InsuranceClaims.Data.DbModels.CompanySchema.Company", "Company")
                        .WithMany("CompanyDenominations")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationUser", "Updator")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Company");

                    b.Navigation("Creator");

                    b.Navigation("Updator");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.CompanySchema.CompanyEmployer", b =>
                {
                    b.HasOne("InsuranceClaims.Data.DbModels.CompanySchema.Company", "Company")
                        .WithMany("CompanyEmployers")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationUser", "Updator")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Company");

                    b.Navigation("Creator");

                    b.Navigation("Updator");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.CompanySchema.CompanyMinorAge", b =>
                {
                    b.HasOne("InsuranceClaims.Data.DbModels.CompanySchema.Company", "Company")
                        .WithMany("CompanyMinorAges")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationUser", "Updator")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Company");

                    b.Navigation("Creator");

                    b.Navigation("Updator");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.CompanySchema.CompanyPaymentMethod", b =>
                {
                    b.HasOne("InsuranceClaims.Data.DbModels.CompanySchema.Company", "Company")
                        .WithMany("CompanyPaymentMethods")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationUser", "Updator")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Company");

                    b.Navigation("Creator");

                    b.Navigation("Updator");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.CustomerSchema.Customer", b =>
                {
                    b.HasOne("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationUser", "AccountManager")
                        .WithMany()
                        .HasForeignKey("AccountManagerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InsuranceClaims.Data.DbModels.CompanySchema.Company", "Company")
                        .WithMany("Customers")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InsuranceClaims.Data.DbModels.CompanySchema.CompanyEmployer", "Employer")
                        .WithMany("Customers")
                        .HasForeignKey("EmployerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationUser", "Updator")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AccountManager");

                    b.Navigation("Company");

                    b.Navigation("Creator");

                    b.Navigation("Employer");

                    b.Navigation("Updator");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.CustomerSchema.CustomerBeneficiary", b =>
                {
                    b.HasOne("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InsuranceClaims.Data.DbModels.CustomerSchema.Customer", "Customer")
                        .WithMany("CustomerBeneficiaries")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationUser", "Updator")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creator");

                    b.Navigation("Customer");

                    b.Navigation("Updator");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.CustomerSchema.CustomerContact", b =>
                {
                    b.HasOne("InsuranceClaims.Data.DbModels.LookupSchema.Country", "Country")
                        .WithMany("CustomerContacts")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InsuranceClaims.Data.DbModels.CustomerSchema.Customer", "Customer")
                        .WithMany("CustomerContacts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationUser", "Updator")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Country");

                    b.Navigation("Creator");

                    b.Navigation("Customer");

                    b.Navigation("Updator");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.CustomerSchema.CustomerDependent", b =>
                {
                    b.HasOne("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InsuranceClaims.Data.DbModels.CustomerSchema.Customer", "Customer")
                        .WithMany("CustomerDependents")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationUser", "Updator")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creator");

                    b.Navigation("Customer");

                    b.Navigation("Updator");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.LookupSchema.Country", b =>
                {
                    b.HasOne("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationUser", "Updator")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creator");

                    b.Navigation("Updator");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.LookupSchema.Currency", b =>
                {
                    b.HasOne("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationUser", "Updator")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creator");

                    b.Navigation("Updator");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.LookupSchema.IdentificationType", b =>
                {
                    b.HasOne("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationUser", "Updator")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creator");

                    b.Navigation("Updator");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.LookupSchema.PolicyInsurer", b =>
                {
                    b.HasOne("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationUser", "Updator")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creator");

                    b.Navigation("Updator");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.LookupSchema.PolicyType", b =>
                {
                    b.HasOne("InsuranceClaims.Data.DbModels.LookupSchema.PolicyInsurer", "PolicyInsurer")
                        .WithMany("PolicyTypes")
                        .HasForeignKey("PolicyInsurerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PolicyInsurer");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.PaymentSchema.Bill", b =>
                {
                    b.HasOne("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InsuranceClaims.Data.DbModels.CustomerSchema.Customer", null)
                        .WithMany("Bills")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InsuranceClaims.Data.DbModels.PolicySchema.Policy", "Policy")
                        .WithMany("Bills")
                        .HasForeignKey("PolicyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationUser", "Updator")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creator");

                    b.Navigation("Policy");

                    b.Navigation("Updator");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.PaymentSchema.CashDenomination", b =>
                {
                    b.HasOne("InsuranceClaims.Data.DbModels.CompanySchema.CompanyDenomination", "CompanyDenomination")
                        .WithMany("CashDenominations")
                        .HasForeignKey("CompanyDenominationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InsuranceClaims.Data.DbModels.PaymentSchema.Payment", "Payment")
                        .WithMany("CashDenominations")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationUser", "Updator")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CompanyDenomination");

                    b.Navigation("Creator");

                    b.Navigation("Payment");

                    b.Navigation("Updator");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.PaymentSchema.CashDenominationReturn", b =>
                {
                    b.HasOne("InsuranceClaims.Data.DbModels.CompanySchema.CompanyDenomination", "CompanyDenomination")
                        .WithMany("CashDenominationReturns")
                        .HasForeignKey("CompanyDenominationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InsuranceClaims.Data.DbModels.PaymentSchema.Payment", "Payment")
                        .WithMany("CashDenominationReturns")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationUser", "Updator")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CompanyDenomination");

                    b.Navigation("Creator");

                    b.Navigation("Payment");

                    b.Navigation("Updator");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.PaymentSchema.Payment", b =>
                {
                    b.HasOne("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InsuranceClaims.Data.DbModels.CustomerSchema.Customer", "Customer")
                        .WithMany("Payments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationUser", "Updator")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creator");

                    b.Navigation("Customer");

                    b.Navigation("Updator");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.PaymentSchema.PaymentAllocation", b =>
                {
                    b.HasOne("InsuranceClaims.Data.DbModels.PaymentSchema.Bill", "Bill")
                        .WithMany("PaymentAllocations")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InsuranceClaims.Data.DbModels.PaymentSchema.Payment", "Payment")
                        .WithMany("PaymentAllocations")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InsuranceClaims.Data.DbModels.CompanySchema.CompanyPaymentMethod", "PaymentMethod")
                        .WithMany("PaymentAllocations")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InsuranceClaims.Data.DbModels.PolicySchema.Policy", "Policy")
                        .WithMany("PaymentAllocations")
                        .HasForeignKey("PolicyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InsuranceClaims.Data.DbModels.PaymentSchema.Prepayment", "Prepayment")
                        .WithMany("PaymentAllocations")
                        .HasForeignKey("PrepaymentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationUser", "Updator")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Bill");

                    b.Navigation("Creator");

                    b.Navigation("Payment");

                    b.Navigation("PaymentMethod");

                    b.Navigation("Policy");

                    b.Navigation("Prepayment");

                    b.Navigation("Updator");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.PaymentSchema.Prepayment", b =>
                {
                    b.HasOne("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InsuranceClaims.Data.DbModels.CustomerSchema.Customer", null)
                        .WithMany("Prepayments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InsuranceClaims.Data.DbModels.PolicySchema.Policy", "Policy")
                        .WithMany("Prepayments")
                        .HasForeignKey("PolicyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationUser", "Updator")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creator");

                    b.Navigation("Policy");

                    b.Navigation("Updator");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.PolicySchema.Policy", b =>
                {
                    b.HasOne("InsuranceClaims.Data.DbModels.LookupSchema.CoverageType", "CoverageType")
                        .WithMany("Policies")
                        .HasForeignKey("CoverageTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InsuranceClaims.Data.DbModels.CustomerSchema.Customer", "Customer")
                        .WithMany("Policies")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InsuranceClaims.Data.DbModels.LookupSchema.PolicyType", "PolicyType")
                        .WithMany("Policies")
                        .HasForeignKey("PolicyTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationUser", "Updator")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CoverageType");

                    b.Navigation("Creator");

                    b.Navigation("Customer");

                    b.Navigation("PolicyType");

                    b.Navigation("Updator");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.PolicySchema.PolicyContent", b =>
                {
                    b.HasOne("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InsuranceClaims.Data.DbModels.PolicySchema.Policy", "Policy")
                        .WithMany("PolicyContents")
                        .HasForeignKey("PolicyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationUser", "Updator")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creator");

                    b.Navigation("Policy");

                    b.Navigation("Updator");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.PolicySchema.PolicyInsuredDriver", b =>
                {
                    b.HasOne("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InsuranceClaims.Data.DbModels.LookupSchema.IdentificationType", "IdentificationType")
                        .WithMany("PolicyIssuredDrivers")
                        .HasForeignKey("IdentificationTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InsuranceClaims.Data.DbModels.PolicySchema.Policy", "Policy")
                        .WithMany("PolicyInsuredDrivers")
                        .HasForeignKey("PolicyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationUser", "Updator")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creator");

                    b.Navigation("IdentificationType");

                    b.Navigation("Policy");

                    b.Navigation("Updator");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationRoleClaim", b =>
                {
                    b.HasOne("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationRole", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationUserClaim", b =>
                {
                    b.HasOne("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationUser", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationUserLogin", b =>
                {
                    b.HasOne("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationUser", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationUserRole", b =>
                {
                    b.HasOne("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationUserToken", b =>
                {
                    b.HasOne("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationUser", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.ClaimSchema.Claim", b =>
                {
                    b.Navigation("ClaimAttachments");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.CompanySchema.Company", b =>
                {
                    b.Navigation("CompanyAttachmentTypes");

                    b.Navigation("CompanyCollectionMethods");

                    b.Navigation("CompanyContacts");

                    b.Navigation("CompanyDenominations");

                    b.Navigation("CompanyEmployers");

                    b.Navigation("CompanyMinorAges");

                    b.Navigation("CompanyPaymentMethods");

                    b.Navigation("Customers");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.CompanySchema.CompanyCollectionMethod", b =>
                {
                    b.Navigation("Claims");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.CompanySchema.CompanyDenomination", b =>
                {
                    b.Navigation("CashDenominationReturns");

                    b.Navigation("CashDenominations");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.CompanySchema.CompanyEmployer", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.CompanySchema.CompanyPaymentMethod", b =>
                {
                    b.Navigation("PaymentAllocations");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.CustomerSchema.Customer", b =>
                {
                    b.Navigation("Bills");

                    b.Navigation("Claims");

                    b.Navigation("CustomerBeneficiaries");

                    b.Navigation("CustomerContacts");

                    b.Navigation("CustomerDependents");

                    b.Navigation("Payments");

                    b.Navigation("Policies");

                    b.Navigation("Prepayments");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.LookupSchema.ClaimStatus", b =>
                {
                    b.Navigation("Claims");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.LookupSchema.Country", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("CustomerContacts");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.LookupSchema.CoverageType", b =>
                {
                    b.Navigation("Policies");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.LookupSchema.Currency", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.LookupSchema.IdentificationType", b =>
                {
                    b.Navigation("PolicyIssuredDrivers");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.LookupSchema.PolicyInsurer", b =>
                {
                    b.Navigation("PolicyTypes");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.LookupSchema.PolicyType", b =>
                {
                    b.Navigation("Policies");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.PaymentSchema.Bill", b =>
                {
                    b.Navigation("PaymentAllocations");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.PaymentSchema.Payment", b =>
                {
                    b.Navigation("CashDenominationReturns");

                    b.Navigation("CashDenominations");

                    b.Navigation("PaymentAllocations");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.PaymentSchema.Prepayment", b =>
                {
                    b.Navigation("PaymentAllocations");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.PolicySchema.Policy", b =>
                {
                    b.Navigation("Bills");

                    b.Navigation("Claims");

                    b.Navigation("PaymentAllocations");

                    b.Navigation("PolicyContents");

                    b.Navigation("PolicyInsuredDrivers");

                    b.Navigation("Prepayments");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationRole", b =>
                {
                    b.Navigation("RoleClaims");
                });

            modelBuilder.Entity("InsuranceClaims.Data.DbModels.SecuritySchema.ApplicationUser", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Logins");

                    b.Navigation("Tokens");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
